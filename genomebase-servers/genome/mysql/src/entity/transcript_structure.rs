//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "transcript_structure")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub transcript_id: Vec<u8>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub gff_record_id: Vec<u8>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::gff_records::Entity",
        from = "Column::GffRecordId",
        to = "super::gff_records::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    GffRecords,
    #[sea_orm(
        belongs_to = "super::transcripts::Entity",
        from = "Column::TranscriptId",
        to = "super::transcripts::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Transcripts,
}

impl Related<super::gff_records::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GffRecords.def()
    }
}

impl Related<super::transcripts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transcripts.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
