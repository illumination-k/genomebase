//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "gff_records")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Vec<u8>,
    pub gene_model_id: Vec<u8>,
    pub seqname: String,
    pub source: String,
    pub r#type: String,
    pub start: i32,
    pub end: i32,
    #[sea_orm(column_type = "Float")]
    pub score: f32,
    pub strand: String,
    pub phase: String,
    pub attributes: Json,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::gene_models::Entity",
        from = "Column::GeneModelId",
        to = "super::gene_models::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    GeneModels,
}

impl Related<super::gene_models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GeneModels.def()
    }
}

impl Related<super::transcripts::Entity> for Entity {
    fn to() -> RelationDef {
        super::transcript_structure::Relation::Transcripts.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::transcript_structure::Relation::GffRecords
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
