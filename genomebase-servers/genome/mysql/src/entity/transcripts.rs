//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "transcripts")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Vec<u8>,
    pub transcript_id: String,
    pub gene_model_id: Vec<u8>,
    pub gene_id: Vec<u8>,
    pub transcript_type: String,
    pub start: i32,
    pub end: i32,
    pub strand: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::gene_models::Entity",
        from = "Column::GeneModelId",
        to = "super::gene_models::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    GeneModels,
    #[sea_orm(
        belongs_to = "super::genes::Entity",
        from = "Column::GeneId",
        to = "super::genes::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Genes,
    #[sea_orm(has_many = "super::go_terms_annotation::Entity")]
    GoTermsAnnotation,
}

impl Related<super::gene_models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GeneModels.def()
    }
}

impl Related<super::genes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Genes.def()
    }
}

impl Related<super::go_terms_annotation::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GoTermsAnnotation.def()
    }
}

impl Related<super::domains::Entity> for Entity {
    fn to() -> RelationDef {
        super::domain_annotations::Relation::Domains.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::domain_annotations::Relation::Transcripts.def().rev())
    }
}

impl Related<super::kegg_orthologies::Entity> for Entity {
    fn to() -> RelationDef {
        super::kegg_orthologies_annotation::Relation::KeggOrthologies.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::kegg_orthologies_annotation::Relation::Transcripts
                .def()
                .rev(),
        )
    }
}

impl Related<super::kegg_pathways::Entity> for Entity {
    fn to() -> RelationDef {
        super::kegg_pathways_annotation::Relation::KeggPathways.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::kegg_pathways_annotation::Relation::Transcripts
                .def()
                .rev(),
        )
    }
}

impl Related<super::kegg_reaction::Entity> for Entity {
    fn to() -> RelationDef {
        super::kegg_reaction_annotation::Relation::KeggReaction.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::kegg_reaction_annotation::Relation::Transcripts
                .def()
                .rev(),
        )
    }
}

impl Related<super::kogs::Entity> for Entity {
    fn to() -> RelationDef {
        super::kog_annotations::Relation::Kogs.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::kog_annotations::Relation::Transcripts.def().rev())
    }
}

impl Related<super::gff_records::Entity> for Entity {
    fn to() -> RelationDef {
        super::transcript_structure::Relation::GffRecords.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::transcript_structure::Relation::Transcripts
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
