//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "kegg_pathways_annotation")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub kegg_pathway_id: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub transcript_id: Vec<u8>,
    pub created_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::kegg_pathways::Entity",
        from = "Column::KeggPathwayId",
        to = "super::kegg_pathways::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    KeggPathways,
    #[sea_orm(
        belongs_to = "super::transcripts::Entity",
        from = "Column::TranscriptId",
        to = "super::transcripts::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Transcripts,
}

impl Related<super::kegg_pathways::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::KeggPathways.def()
    }
}

impl Related<super::transcripts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transcripts.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
